import WebSocket from "ws";

class MockedWebSocket {
  static CONNECTING = 0;
  static OPEN = 1;
  static CLOSING = 2;
  static CLOSED = 3;

  private state:number;

  constructor(address: URL) {
    this.state = MockedWebSocket.CONNECTING;
    setTimeout(()=> {
      this.onopen({target: this as unknown as WebSocket});
      this.state = MockedWebSocket.OPEN;
    }, 0);
  }
  onopen = (event: WebSocket.OpenEvent):void => {};
  onerror = (event: WebSocket.ErrorEvent):void => {};
  onclose = (event: WebSocket.CloseEvent):void => {};
  onmessage = (event: WebSocket.MessageEvent):void => {};
  _open = () => {
    console.debug ("fooooooooBar")
  }
  
  send(message: string) {
    console.log(`Client sent: ${message}`);
  }

  publish(message: string) {
    this.onmessage({
      data: message,
      type: "text",
      target: this as unknown as WebSocket
    });
  }

  close(code:number = 1000, data?: string):void {
    this.state = MockedWebSocket.CLOSING;
    if(data) {
      this.send(data);
    }
    this.onmessage = () => {}
    this.onclose({code, wasClean: true, reason: "Mock Close", target: this as unknown as WebSocket});
    this.state = MockedWebSocket.CLOSED;
  };
}

jest.mock('ws', () => {
  return MockedWebSocket;
});


exports.default = MockedWebSocket;